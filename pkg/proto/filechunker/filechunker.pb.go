// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.2
// source: filechunker/filechunker.proto

package filechunker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Genie 模式分块策略
type GenieStrategy int32

const (
	GenieStrategy_SLUMBER   GenieStrategy = 0 // SlumberChunker - LLM 驱动的语义分块
	GenieStrategy_RECURSIVE GenieStrategy = 1 // RecursiveChunker - 递归分块（降级选项）
	GenieStrategy_TOKEN     GenieStrategy = 2 // TokenChunker - 基于令牌的分块（降级选项）
)

// Enum value maps for GenieStrategy.
var (
	GenieStrategy_name = map[int32]string{
		0: "SLUMBER",
		1: "RECURSIVE",
		2: "TOKEN",
	}
	GenieStrategy_value = map[string]int32{
		"SLUMBER":   0,
		"RECURSIVE": 1,
		"TOKEN":     2,
	}
)

func (x GenieStrategy) Enum() *GenieStrategy {
	p := new(GenieStrategy)
	*p = x
	return p
}

func (x GenieStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenieStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_filechunker_filechunker_proto_enumTypes[0].Descriptor()
}

func (GenieStrategy) Type() protoreflect.EnumType {
	return &file_filechunker_filechunker_proto_enumTypes[0]
}

func (x GenieStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenieStrategy.Descriptor instead.
func (GenieStrategy) EnumDescriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{0}
}

// LLM 提供商
type LLMProvider int32

const (
	LLMProvider_OPENAI LLMProvider = 0 // OpenAI GPT 系列
	LLMProvider_GEMINI LLMProvider = 1 // Google Gemini 系列
	LLMProvider_AUTO   LLMProvider = 2 // 自动选择最佳提供商
)

// Enum value maps for LLMProvider.
var (
	LLMProvider_name = map[int32]string{
		0: "OPENAI",
		1: "GEMINI",
		2: "AUTO",
	}
	LLMProvider_value = map[string]int32{
		"OPENAI": 0,
		"GEMINI": 1,
		"AUTO":   2,
	}
)

func (x LLMProvider) Enum() *LLMProvider {
	p := new(LLMProvider)
	*p = x
	return p
}

func (x LLMProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LLMProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_filechunker_filechunker_proto_enumTypes[1].Descriptor()
}

func (LLMProvider) Type() protoreflect.EnumType {
	return &file_filechunker_filechunker_proto_enumTypes[1]
}

func (x LLMProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LLMProvider.Descriptor instead.
func (LLMProvider) EnumDescriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{1}
}

// 分块请求
type ChunkFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileContent []byte        `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`        // 文件内容
	Filename    string        `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                 // 文件名
	MimeType    string        `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                 // MIME类型
	Strategy    GenieStrategy `protobuf:"varint,4,opt,name=strategy,proto3,enum=filechunker.GenieStrategy" json:"strategy,omitempty"` // Genie 分块策略
	Config      *GenieConfig  `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`                                     // Genie 配置
}

func (x *ChunkFileRequest) Reset() {
	*x = ChunkFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkFileRequest) ProtoMessage() {}

func (x *ChunkFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkFileRequest.ProtoReflect.Descriptor instead.
func (*ChunkFileRequest) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkFileRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *ChunkFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ChunkFileRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *ChunkFileRequest) GetStrategy() GenieStrategy {
	if x != nil {
		return x.Strategy
	}
	return GenieStrategy_SLUMBER
}

func (x *ChunkFileRequest) GetConfig() *GenieConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Genie 配置
type GenieConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LlmProvider       LLMProvider       `protobuf:"varint,1,opt,name=llm_provider,json=llmProvider,proto3,enum=filechunker.LLMProvider" json:"llm_provider,omitempty"`                                                     // LLM 提供商
	ModelName         string            `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`                                                                                         // 模型名称
	ApiKey            string            `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`                                                                                                  // API 密钥
	LlmHost           string            `protobuf:"bytes,4,opt,name=llm_host,json=llmHost,proto3" json:"llm_host,omitempty"`                                                                                               // LLM 服务主机地址（可选，用于自托管服务）
	TargetChunkSize   int32             `protobuf:"varint,5,opt,name=target_chunk_size,json=targetChunkSize,proto3" json:"target_chunk_size,omitempty"`                                                                    // 目标分块大小
	SemanticThreshold float32           `protobuf:"fixed32,6,opt,name=semantic_threshold,json=semanticThreshold,proto3" json:"semantic_threshold,omitempty"`                                                               // 语义相似度阈值
	CustomPrompt      string            `protobuf:"bytes,7,opt,name=custom_prompt,json=customPrompt,proto3" json:"custom_prompt,omitempty"`                                                                                // 自定义提示词
	LlmParams         map[string]string `protobuf:"bytes,8,rep,name=llm_params,json=llmParams,proto3" json:"llm_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // LLM 参数
}

func (x *GenieConfig) Reset() {
	*x = GenieConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenieConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenieConfig) ProtoMessage() {}

func (x *GenieConfig) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenieConfig.ProtoReflect.Descriptor instead.
func (*GenieConfig) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{1}
}

func (x *GenieConfig) GetLlmProvider() LLMProvider {
	if x != nil {
		return x.LlmProvider
	}
	return LLMProvider_OPENAI
}

func (x *GenieConfig) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *GenieConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *GenieConfig) GetLlmHost() string {
	if x != nil {
		return x.LlmHost
	}
	return ""
}

func (x *GenieConfig) GetTargetChunkSize() int32 {
	if x != nil {
		return x.TargetChunkSize
	}
	return 0
}

func (x *GenieConfig) GetSemanticThreshold() float32 {
	if x != nil {
		return x.SemanticThreshold
	}
	return 0
}

func (x *GenieConfig) GetCustomPrompt() string {
	if x != nil {
		return x.CustomPrompt
	}
	return ""
}

func (x *GenieConfig) GetLlmParams() map[string]string {
	if x != nil {
		return x.LlmParams
	}
	return nil
}

// 分块响应
type ChunkFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                  // 是否成功
	Message  string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                   // 消息
	Chunks   []*GenieChunk `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`                     // Genie 分块结果
	Metadata *FileMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`                 // 文件元数据
	LlmUsage *LLMUsage     `protobuf:"bytes,5,opt,name=llm_usage,json=llmUsage,proto3" json:"llm_usage,omitempty"` // LLM 使用情况
}

func (x *ChunkFileResponse) Reset() {
	*x = ChunkFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkFileResponse) ProtoMessage() {}

func (x *ChunkFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkFileResponse.ProtoReflect.Descriptor instead.
func (*ChunkFileResponse) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChunkFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChunkFileResponse) GetChunks() []*GenieChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *ChunkFileResponse) GetMetadata() *FileMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ChunkFileResponse) GetLlmUsage() *LLMUsage {
	if x != nil {
		return x.LlmUsage
	}
	return nil
}

// Genie 分块
type GenieChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                     // 分块ID
	Text            string            `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`                                                                                                 // 分块文本内容
	TokenCount      int32             `protobuf:"varint,3,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"`                                                                  // token数量
	StartIndex      int32             `protobuf:"varint,4,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`                                                                  // 开始位置
	EndIndex        int32             `protobuf:"varint,5,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`                                                                        // 结束位置
	SemanticScore   float32           `protobuf:"fixed32,6,opt,name=semantic_score,json=semanticScore,proto3" json:"semantic_score,omitempty"`                                                        // 语义得分
	SemanticSummary string            `protobuf:"bytes,7,opt,name=semantic_summary,json=semanticSummary,proto3" json:"semantic_summary,omitempty"`                                                    // 语义摘要
	KeyConcepts     []string          `protobuf:"bytes,8,rep,name=key_concepts,json=keyConcepts,proto3" json:"key_concepts,omitempty"`                                                                // 关键概念
	Metadata        map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 分块元数据
}

func (x *GenieChunk) Reset() {
	*x = GenieChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenieChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenieChunk) ProtoMessage() {}

func (x *GenieChunk) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenieChunk.ProtoReflect.Descriptor instead.
func (*GenieChunk) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{3}
}

func (x *GenieChunk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenieChunk) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GenieChunk) GetTokenCount() int32 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

func (x *GenieChunk) GetStartIndex() int32 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *GenieChunk) GetEndIndex() int32 {
	if x != nil {
		return x.EndIndex
	}
	return 0
}

func (x *GenieChunk) GetSemanticScore() float32 {
	if x != nil {
		return x.SemanticScore
	}
	return 0
}

func (x *GenieChunk) GetSemanticSummary() string {
	if x != nil {
		return x.SemanticSummary
	}
	return ""
}

func (x *GenieChunk) GetKeyConcepts() []string {
	if x != nil {
		return x.KeyConcepts
	}
	return nil
}

func (x *GenieChunk) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 文件元数据
type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalFilename string  `protobuf:"bytes,1,opt,name=original_filename,json=originalFilename,proto3" json:"original_filename,omitempty"` // 原始文件名
	MimeType         string  `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                         // MIME类型
	FileSize         int64   `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`                        // 文件大小
	ConvertedFormat  string  `protobuf:"bytes,4,opt,name=converted_format,json=convertedFormat,proto3" json:"converted_format,omitempty"`    // 转换后的格式
	TotalChunks      int32   `protobuf:"varint,5,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`               // 总分块数
	TotalTokens      int32   `protobuf:"varint,6,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`               // 总token数
	ContentType      string  `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`                // 内容类型分析
	ComplexityScore  float32 `protobuf:"fixed32,8,opt,name=complexity_score,json=complexityScore,proto3" json:"complexity_score,omitempty"`  // 内容复杂度得分
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{4}
}

func (x *FileMetadata) GetOriginalFilename() string {
	if x != nil {
		return x.OriginalFilename
	}
	return ""
}

func (x *FileMetadata) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *FileMetadata) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileMetadata) GetConvertedFormat() string {
	if x != nil {
		return x.ConvertedFormat
	}
	return ""
}

func (x *FileMetadata) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *FileMetadata) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *FileMetadata) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FileMetadata) GetComplexityScore() float32 {
	if x != nil {
		return x.ComplexityScore
	}
	return 0
}

// LLM 使用情况
type LLMUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider         string  `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`                                          // 使用的提供商
	Model            string  `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`                                                // 使用的模型
	PromptTokens     int32   `protobuf:"varint,3,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`             // 提示词token数
	CompletionTokens int32   `protobuf:"varint,4,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"` // 完成token数
	TotalTokens      int32   `protobuf:"varint,5,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`                // 总token数
	EstimatedCost    float32 `protobuf:"fixed32,6,opt,name=estimated_cost,json=estimatedCost,proto3" json:"estimated_cost,omitempty"`         // 预估成本
}

func (x *LLMUsage) Reset() {
	*x = LLMUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LLMUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMUsage) ProtoMessage() {}

func (x *LLMUsage) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMUsage.ProtoReflect.Descriptor instead.
func (*LLMUsage) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{5}
}

func (x *LLMUsage) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *LLMUsage) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *LLMUsage) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *LLMUsage) GetCompletionTokens() int32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *LLMUsage) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *LLMUsage) GetEstimatedCost() float32 {
	if x != nil {
		return x.EstimatedCost
	}
	return 0
}

// 获取支持的LLM请求
type GetSupportedLLMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSupportedLLMsRequest) Reset() {
	*x = GetSupportedLLMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportedLLMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedLLMsRequest) ProtoMessage() {}

func (x *GetSupportedLLMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedLLMsRequest.ProtoReflect.Descriptor instead.
func (*GetSupportedLLMsRequest) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{6}
}

// 获取支持的LLM响应
type GetSupportedLLMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportedLlms []*LLMInfo `protobuf:"bytes,1,rep,name=supported_llms,json=supportedLlms,proto3" json:"supported_llms,omitempty"` // 支持的LLM列表
}

func (x *GetSupportedLLMsResponse) Reset() {
	*x = GetSupportedLLMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportedLLMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedLLMsResponse) ProtoMessage() {}

func (x *GetSupportedLLMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedLLMsResponse.ProtoReflect.Descriptor instead.
func (*GetSupportedLLMsResponse) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{7}
}

func (x *GetSupportedLLMsResponse) GetSupportedLlms() []*LLMInfo {
	if x != nil {
		return x.SupportedLlms
	}
	return nil
}

// LLM 信息
type LLMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider       LLMProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=filechunker.LLMProvider" json:"provider,omitempty"`        // 提供商
	Name           string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                              // 名称
	Models         []string    `protobuf:"bytes,3,rep,name=models,proto3" json:"models,omitempty"`                                          // 支持的模型列表
	RequiresApiKey bool        `protobuf:"varint,4,opt,name=requires_api_key,json=requiresApiKey,proto3" json:"requires_api_key,omitempty"` // 是否需要API密钥
	Description    string      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                // 描述
}

func (x *LLMInfo) Reset() {
	*x = LLMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LLMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMInfo) ProtoMessage() {}

func (x *LLMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMInfo.ProtoReflect.Descriptor instead.
func (*LLMInfo) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{8}
}

func (x *LLMInfo) GetProvider() LLMProvider {
	if x != nil {
		return x.Provider
	}
	return LLMProvider_OPENAI
}

func (x *LLMInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LLMInfo) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *LLMInfo) GetRequiresApiKey() bool {
	if x != nil {
		return x.RequiresApiKey
	}
	return false
}

func (x *LLMInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 健康检查请求
type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{9}
}

// 健康检查响应
type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy       bool     `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`                                 // 是否健康
	Version       string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                                  // 服务版本
	Status        string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                    // 状态信息
	AvailableLlms []string `protobuf:"bytes,4,rep,name=available_llms,json=availableLlms,proto3" json:"available_llms,omitempty"` // 可用的LLM列表
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filechunker_filechunker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filechunker_filechunker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_filechunker_filechunker_proto_rawDescGZIP(), []int{10}
}

func (x *HealthCheckResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *HealthCheckResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetAvailableLlms() []string {
	if x != nil {
		return x.AvailableLlms
	}
	return nil
}

var File_filechunker_filechunker_proto protoreflect.FileDescriptor

var file_filechunker_filechunker_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x22, 0xd8, 0x01, 0x0a,
	0x10, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x6e, 0x69, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa3, 0x03, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x69,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x6c, 0x6d, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x4c, 0x4d, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x6c, 0x6d, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6c, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6c, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x6c, 0x6c, 0x6d, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x69, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6c, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x6c, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x3c, 0x0a, 0x0e, 0x4c, 0x6c, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01,
	0x0a, 0x11, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x69, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x32, 0x0a, 0x09, 0x6c, 0x6c, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72,
	0x2e, 0x4c, 0x4c, 0x4d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x6c, 0x6d, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x69, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6b,
	0x65, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x69, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x02, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x4c, 0x4c, 0x4d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x4c, 0x4d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x4c, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x6c, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x4c, 0x4d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x6c, 0x6d, 0x73,
	0x22, 0xb7, 0x01, 0x0a, 0x07, 0x4c, 0x4c, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x4c, 0x4d,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x88, 0x01, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6c, 0x6c, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6c, 0x6d, 0x73, 0x2a, 0x36, 0x0a, 0x0d, 0x47,
	0x65, 0x6e, 0x69, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x4c, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43,
	0x55, 0x52, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x10, 0x02, 0x2a, 0x2f, 0x0a, 0x0b, 0x4c, 0x4c, 0x4d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x47, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55,
	0x54, 0x4f, 0x10, 0x02, 0x32, 0x93, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x4c, 0x4d, 0x73, 0x12, 0x24, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x4c, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x4c, 0x4d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x75, 0x6b, 0x61, 0x2d, 0x61, 0x69,
	0x2f, 0x71, 0x75, 0x6b, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_filechunker_filechunker_proto_rawDescOnce sync.Once
	file_filechunker_filechunker_proto_rawDescData = file_filechunker_filechunker_proto_rawDesc
)

func file_filechunker_filechunker_proto_rawDescGZIP() []byte {
	file_filechunker_filechunker_proto_rawDescOnce.Do(func() {
		file_filechunker_filechunker_proto_rawDescData = protoimpl.X.CompressGZIP(file_filechunker_filechunker_proto_rawDescData)
	})
	return file_filechunker_filechunker_proto_rawDescData
}

var file_filechunker_filechunker_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_filechunker_filechunker_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_filechunker_filechunker_proto_goTypes = []interface{}{
	(GenieStrategy)(0),               // 0: filechunker.GenieStrategy
	(LLMProvider)(0),                 // 1: filechunker.LLMProvider
	(*ChunkFileRequest)(nil),         // 2: filechunker.ChunkFileRequest
	(*GenieConfig)(nil),              // 3: filechunker.GenieConfig
	(*ChunkFileResponse)(nil),        // 4: filechunker.ChunkFileResponse
	(*GenieChunk)(nil),               // 5: filechunker.GenieChunk
	(*FileMetadata)(nil),             // 6: filechunker.FileMetadata
	(*LLMUsage)(nil),                 // 7: filechunker.LLMUsage
	(*GetSupportedLLMsRequest)(nil),  // 8: filechunker.GetSupportedLLMsRequest
	(*GetSupportedLLMsResponse)(nil), // 9: filechunker.GetSupportedLLMsResponse
	(*LLMInfo)(nil),                  // 10: filechunker.LLMInfo
	(*HealthCheckRequest)(nil),       // 11: filechunker.HealthCheckRequest
	(*HealthCheckResponse)(nil),      // 12: filechunker.HealthCheckResponse
	nil,                              // 13: filechunker.GenieConfig.LlmParamsEntry
	nil,                              // 14: filechunker.GenieChunk.MetadataEntry
}
var file_filechunker_filechunker_proto_depIdxs = []int32{
	0,  // 0: filechunker.ChunkFileRequest.strategy:type_name -> filechunker.GenieStrategy
	3,  // 1: filechunker.ChunkFileRequest.config:type_name -> filechunker.GenieConfig
	1,  // 2: filechunker.GenieConfig.llm_provider:type_name -> filechunker.LLMProvider
	13, // 3: filechunker.GenieConfig.llm_params:type_name -> filechunker.GenieConfig.LlmParamsEntry
	5,  // 4: filechunker.ChunkFileResponse.chunks:type_name -> filechunker.GenieChunk
	6,  // 5: filechunker.ChunkFileResponse.metadata:type_name -> filechunker.FileMetadata
	7,  // 6: filechunker.ChunkFileResponse.llm_usage:type_name -> filechunker.LLMUsage
	14, // 7: filechunker.GenieChunk.metadata:type_name -> filechunker.GenieChunk.MetadataEntry
	10, // 8: filechunker.GetSupportedLLMsResponse.supported_llms:type_name -> filechunker.LLMInfo
	1,  // 9: filechunker.LLMInfo.provider:type_name -> filechunker.LLMProvider
	2,  // 10: filechunker.FileChunkerService.ChunkFile:input_type -> filechunker.ChunkFileRequest
	8,  // 11: filechunker.FileChunkerService.GetSupportedLLMs:input_type -> filechunker.GetSupportedLLMsRequest
	11, // 12: filechunker.FileChunkerService.HealthCheck:input_type -> filechunker.HealthCheckRequest
	4,  // 13: filechunker.FileChunkerService.ChunkFile:output_type -> filechunker.ChunkFileResponse
	9,  // 14: filechunker.FileChunkerService.GetSupportedLLMs:output_type -> filechunker.GetSupportedLLMsResponse
	12, // 15: filechunker.FileChunkerService.HealthCheck:output_type -> filechunker.HealthCheckResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_filechunker_filechunker_proto_init() }
func file_filechunker_filechunker_proto_init() {
	if File_filechunker_filechunker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_filechunker_filechunker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filechunker_filechunker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenieConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filechunker_filechunker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filechunker_filechunker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenieChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filechunker_filechunker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filechunker_filechunker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LLMUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filechunker_filechunker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportedLLMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filechunker_filechunker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportedLLMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filechunker_filechunker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LLMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filechunker_filechunker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filechunker_filechunker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_filechunker_filechunker_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_filechunker_filechunker_proto_goTypes,
		DependencyIndexes: file_filechunker_filechunker_proto_depIdxs,
		EnumInfos:         file_filechunker_filechunker_proto_enumTypes,
		MessageInfos:      file_filechunker_filechunker_proto_msgTypes,
	}.Build()
	File_filechunker_filechunker_proto = out.File
	file_filechunker_filechunker_proto_rawDesc = nil
	file_filechunker_filechunker_proto_goTypes = nil
	file_filechunker_filechunker_proto_depIdxs = nil
}
