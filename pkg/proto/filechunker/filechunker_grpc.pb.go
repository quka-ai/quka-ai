// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: filechunker/filechunker.proto

package filechunker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileChunkerService_ChunkFile_FullMethodName        = "/filechunker.FileChunkerService/ChunkFile"
	FileChunkerService_GetSupportedLLMs_FullMethodName = "/filechunker.FileChunkerService/GetSupportedLLMs"
	FileChunkerService_HealthCheck_FullMethodName      = "/filechunker.FileChunkerService/HealthCheck"
)

// FileChunkerServiceClient is the client API for FileChunkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileChunkerServiceClient interface {
	// 对文件进行智能分块处理（Genie 模式）
	ChunkFile(ctx context.Context, in *ChunkFileRequest, opts ...grpc.CallOption) (*ChunkFileResponse, error)
	// 获取支持的 LLM 提供商和模型
	GetSupportedLLMs(ctx context.Context, in *GetSupportedLLMsRequest, opts ...grpc.CallOption) (*GetSupportedLLMsResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type fileChunkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileChunkerServiceClient(cc grpc.ClientConnInterface) FileChunkerServiceClient {
	return &fileChunkerServiceClient{cc}
}

func (c *fileChunkerServiceClient) ChunkFile(ctx context.Context, in *ChunkFileRequest, opts ...grpc.CallOption) (*ChunkFileResponse, error) {
	out := new(ChunkFileResponse)
	err := c.cc.Invoke(ctx, FileChunkerService_ChunkFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileChunkerServiceClient) GetSupportedLLMs(ctx context.Context, in *GetSupportedLLMsRequest, opts ...grpc.CallOption) (*GetSupportedLLMsResponse, error) {
	out := new(GetSupportedLLMsResponse)
	err := c.cc.Invoke(ctx, FileChunkerService_GetSupportedLLMs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileChunkerServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, FileChunkerService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileChunkerServiceServer is the server API for FileChunkerService service.
// All implementations must embed UnimplementedFileChunkerServiceServer
// for forward compatibility
type FileChunkerServiceServer interface {
	// 对文件进行智能分块处理（Genie 模式）
	ChunkFile(context.Context, *ChunkFileRequest) (*ChunkFileResponse, error)
	// 获取支持的 LLM 提供商和模型
	GetSupportedLLMs(context.Context, *GetSupportedLLMsRequest) (*GetSupportedLLMsResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedFileChunkerServiceServer()
}

// UnimplementedFileChunkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileChunkerServiceServer struct {
}

func (UnimplementedFileChunkerServiceServer) ChunkFile(context.Context, *ChunkFileRequest) (*ChunkFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkFile not implemented")
}
func (UnimplementedFileChunkerServiceServer) GetSupportedLLMs(context.Context, *GetSupportedLLMsRequest) (*GetSupportedLLMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedLLMs not implemented")
}
func (UnimplementedFileChunkerServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedFileChunkerServiceServer) mustEmbedUnimplementedFileChunkerServiceServer() {}

// UnsafeFileChunkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileChunkerServiceServer will
// result in compilation errors.
type UnsafeFileChunkerServiceServer interface {
	mustEmbedUnimplementedFileChunkerServiceServer()
}

func RegisterFileChunkerServiceServer(s grpc.ServiceRegistrar, srv FileChunkerServiceServer) {
	s.RegisterService(&FileChunkerService_ServiceDesc, srv)
}

func _FileChunkerService_ChunkFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileChunkerServiceServer).ChunkFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileChunkerService_ChunkFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileChunkerServiceServer).ChunkFile(ctx, req.(*ChunkFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileChunkerService_GetSupportedLLMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedLLMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileChunkerServiceServer).GetSupportedLLMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileChunkerService_GetSupportedLLMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileChunkerServiceServer).GetSupportedLLMs(ctx, req.(*GetSupportedLLMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileChunkerService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileChunkerServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileChunkerService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileChunkerServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileChunkerService_ServiceDesc is the grpc.ServiceDesc for FileChunkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileChunkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filechunker.FileChunkerService",
	HandlerType: (*FileChunkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChunkFile",
			Handler:    _FileChunkerService_ChunkFile_Handler,
		},
		{
			MethodName: "GetSupportedLLMs",
			Handler:    _FileChunkerService_GetSupportedLLMs_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _FileChunkerService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filechunker/filechunker.proto",
}
